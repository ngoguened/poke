syntax = "proto3";

service Poke {
  // The service that sends the server's state to the client and the client's move to the server.

  rpc Register (RegisterRequest) returns (RegisterReply) {}

  rpc GetModel (GetModelRequest) returns (GetModelReply) {}

  rpc Command (CommandRequest) returns (CommandReply) {}

  rpc Wait (WaitRequest) returns (WaitReply) {}
}

message RequestHeader {
  string user_id = 1;
}

message RegisterRequest {
  RequestHeader header = 1;
  bool first_connect = 2;
}

message RegisterReply {

}

message Model {
  int32 client_health = 1;
  optional int32 opponent_health = 2;
  optional bool winner = 3;
  bool playing = 4;
}

message GetModelRequest {
  // The request message containing the user id from the client for the server's model.
  RequestHeader header = 1;
}

message GetModelReply {
  // The response message containing the server model for the client who requested the model.
  // For now this is only the health of the two players.
  Model model = 1;
}

message Move {
  // Since there is only one thing a move can mean the move class can be empty.
}

message CommandRequest {
  // The request message from the server for the client's action whose turn it is.
  // UpdateType specifies what type of action the server is expecting.
  RequestHeader header = 1;
  oneof command {
    Move move = 2;
  } 
}

message CommandReply {
  // The response message containing whether the update to the server was valid or not.
  Model diff = 1; //Only fills in the fields that change.
}

message WaitRequest {
  // The request message from the client to the server for the move of the other client.
  RequestHeader header = 1;
}

message WaitReply {
  // The response message containing the move of the other client.
  Model diff = 1; //Only fills in the fields that change.
}